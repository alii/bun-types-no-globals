name: Update Bun Types

on:
  schedule:
    - cron: '0 0 * * *' # daily at 00:00 UTC
  workflow_dispatch:

jobs:
  update-types:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Process missing versions
        env:
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          echo "Getting current version from package.json..."
          CURRENT_VERSION=$(cat package.json | jq -r '.version')
          echo "Current package version: $CURRENT_VERSION"

          echo "Fetching all bun-types versions..."
          ALL_VERSIONS=$(bun info bun-types versions --json | jq -r '.[]')

          echo "Finding versions newer than $CURRENT_VERSION..."
          NEW_VERSIONS=""
          FOUND_CURRENT=false

          for VERSION in $ALL_VERSIONS; do
            if [ "$FOUND_CURRENT" = true ]; then
              NEW_VERSIONS="$NEW_VERSIONS $VERSION"
            fi
            if [ "$VERSION" = "$CURRENT_VERSION" ]; then
              FOUND_CURRENT=true
              echo "Found current version in list, will process all versions after this"
            fi
          done

          if [ -z "$NEW_VERSIONS" ]; then
            echo "No new versions to publish"
            exit 0
          fi

          echo "New versions to publish:$NEW_VERSIONS"

          for VERSION in $NEW_VERSIONS; do
            echo ""
            echo "Processing version: $VERSION"
            
            if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              PUBLISH_TAG="latest"
              echo "This is a stable release"
            else
              PUBLISH_TAG="canary"
              echo "This is a pre-release/canary version"
            fi
            
            echo "Running generator for $VERSION..."
            bun run generator/index.ts "$VERSION"
            
            git add lib/ package.json
            git commit -m "update bun types to v$VERSION [automated]" || {
              echo "No changes to commit for $VERSION"
              continue
            }
            
            git push
            
            echo "Creating git tag: v$VERSION"
            git tag "v$VERSION" -m "Release v$VERSION"
            git push origin "v$VERSION"
            
            echo "Creating GitHub release for v$VERSION"
            if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              gh release create "v$VERSION" \
                --title "v$VERSION" \
                --notes "Automated release of bun-types-no-globals v$VERSION" \
                --latest
            else
              gh release create "v$VERSION" \
                --title "v$VERSION" \
                --notes "Automated pre-release of bun-types-no-globals v$VERSION" \
                --prerelease
            fi
            
            echo "Publishing $VERSION to npm with tag: $PUBLISH_TAG"
            bun publish --tag="$PUBLISH_TAG" --access public
            
            echo "Successfully processed $VERSION"
          done
